#Task-1.1

def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)
print(factorial(5))

#Task-1.2

def fibonacci(nth):
    if nth == 0:
        return 0
    if nth == 1 or nth == 2:
        return 1
    return fibonacci(nth-1) + fibonacci(nth-2)
print(fibonacci(3))

#Task-1.3

def print_array(array,index):
    if index == len(array):
        return
    print(array[index])
    print_array(array,index+1)
    
print_array([1,2,3,4],0)

#Task-1.4

def powerN(m,n):
    if n == 0:
        return 1
    return m * powerN(m,n-1)
print(powerN(3,4))


#Task-2.1

def Dec_To_Binary(n):
    if n == 0:
        return ''
    return str(Dec_To_Binary(n//2)) + str(n%2) 

print(Dec_To_Binary(10))

#Task-2.2&2.3 

class Node:
    def __init__(self,element,next):
        self.element = element
        self.next = next
        
class My_List:
    
    def __init__(self,a):
        self.head = None
        self.tail = None
        
        for i in a:
            n = Node(i, None)
            if self.head is None:
                self.head = n
                self.tail = n
            else:
                self.tail.next = n
                self.tail = n
                
def add_element(head):
    if head.next == None:
        return head.element
    return head.element + add_element(head.next)

def print_reverse(head):
    if head.next == None:
        print(head.element)
        return 
    print_reverse(head.next)
    print(head.element)
        
    
        
l1 = My_List([10,20,30,40,50])
print(add_element(l1.head))
print_reverse(l1.head)

#Task-3

def hocBuilder(height):
    if height == 0:
        return 0
    if height == 1:
        return 8
    
    return 5 + hocBuilder(height-1)

print(hocBuilder(9)) 

#Task-4.1

def count_row(n):
    if n == 0:
        return
    count_row(n-1)
    print(pattern(n))
    
def pattern(n):
    if n == 1:
        return 1
    print(pattern(n-1),end ='')
    return n

count_row(6)

#Task-4.2

def main(n,i):
    if i > n:
        return
    print_space(n-i)
    print(print_num(i))
    
    main(n,i+1)
    
def print_space(n):
    if n == 0:
        return
    print(" ",end='')
    print_space(n-1)
    
def print_num(n):
    if n == 1:
        return 1
    print(print_num(n-1),end='')
    return n


main(7,1)

#Task-5

class FinalQ: 
    def print(self,array,idx): 
        if(idx<len(array)): 
            profit = self.calcProfit(array[idx])
            print(str(idx+1) + ".Investment:"+ str(array[idx]) + "; Profit:"+ str(profit))
            self.print(array,idx+1)
    def calcProfit(self,investment):
        if investment > 25000 and investment <= 100000:
            return (self.calcProfit(investment-5000) + 225)
        elif investment > 100000:
            return (self.calcProfit(investment-5000) + 400)
        return 0.0
        
        

array=[25000,100000,250000,350000] 
f = FinalQ() 
f.print(array,0)